<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../T4/T4Manager.ttinclude" #>
<#@ include file="../T4/EntityHelper.ttinclude" #>
<# 
    // 是否是WCF服务模型
    bool serviceModel = false;
	var nameSpace="NQuick.DataCache";
    // 文件版权信息
    var copyright = DateTime.Now.Year + " xxxx Enterprises All Rights Reserved";
    var version = Environment.Version;
    var author = "auto generated by T4";
	 
    var manager = Manager.Create(Host, GenerationEnvironment);
    var entities = EntityHelper.GetEntities();

    foreach(Entity entity in entities)
    {
		 
		var genClassName=entity.EntityName.Replace("_","");		 
		manager.StartNewFile(genClassName + "Cache.cs");
        //manager.StartNewFile(entity.EntityName + ".cs");
#>
//-----------------------------------------------------------------------
// <copyright file=" <#= genClassName #>.cs" company="xxxx Enterprises">
// * Copyright (C) <#= copyright #>
// * version : <#= version #>
// * author  : <#= author #>
// * FileName: <#= entity.EntityName #>.cs
// * history : Created by T4 <#= DateTime.Now #> 
// </copyright>
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NQuick.DataModel;
using NQuick.DataCache.Base; 

namespace <#= nameSpace #>
{
    /// <summary>
    /// 实体类@<#= genClassName #> Entity Model
    /// </summary> 
	[Table("<#= entity.EntityName #>")]   
    [Serializable]
 
    public partial class <#= genClassName #> : Entity
    {
		#region private
		<#
        for(int i = 0; i < entity.Fields.Count; i++)
        {  
			var type= "";
			if(entity.Fields[i].Type=="bigint"){
				type="long";
			}
			else{
			type = entity.Fields[i].Type;
			}
		#>        
		 private  <#= type #> _<#= entity.Fields[i].Name #>;
<#           
        }
#>
		#endregion

		#region public


<#
        for(int i = 0; i < entity.Fields.Count; i++)
        {
			var type= "";
			if(entity.Fields[i].Type=="bigint"){
				type="long";
			}else{
			type = entity.Fields[i].Type;
			} 

#>        
		/// <summary>
		/// <#= entity.Fields[i].Comment #>
        /// </summary> 
        public <#= type #> <#= entity.Fields[i].Name #> 
		{ 
			get { return _<#= entity.Fields[i].Name #> ; }
			set 
			{
				this.OnPropertyValueChange(_.<#= entity.Fields[i].Name #>, _<#= entity.Fields[i].Name #>, value);
				this._<#= entity.Fields[i].Name #>=value;
			}
		}  
<#         
        }
#>
		#endregion

		#region Method

		 
		#endregion
 

		#region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
		public class _
		{
			
			/// <summary>
            /// * 
            /// </summary>
			public readonly static Field All = new Field("*", "<#= entity.EntityName #>");

			<#
        for(int i = 0; i < entity.Fields.Count; i++)
        {  
			var type= "";
			if(entity.Fields[i].Type=="bigint"){
				type="long";
			}
			else{
			type = entity.Fields[i].Type;
			}
		#>        
		 
			/// <summary>
            /// <#= entity.Fields[i].Comment #>
            /// </summary>
			public readonly static Field <#= entity.Fields[i].Name #> = new Field("<#= entity.Fields[i].Name #>", "<#= entity.EntityName #>","<#= entity.Fields[i].Name #>");		
<#           
				}
#>
			
		}
		#endregion
		
    }
}
<#        
        manager.EndBlock(); 
    }

    manager.Process(true);
#>

